[tool.poetry]
name = "cookiecutter-python-poetry"
version = "0.1.0"
description = "A python cookiecutter application to create a new python project that uses poetry to manage its dependencies."
authors = ["Meghan Thommes <meghan.thommes@gmail.com>"]
license = "MIT"
repository = "https://github.com/megthommes/cookiecutter-python-poetry"
documentation = "https://cookiecutter-python-poetry.readthedocs.io/"
readme = "README.md"
keywords = ["cookiecutter", "template", "poetry"]
packages = [
  {include = "cookiecutter_python_poetry"}
]
include = [
  '{{cookiecutter.project_name}}/**/*',
  'cookiecutter.json',
  'hooks/*'
]

[tool.poetry.dependencies]
python = ">=3.9,<4.0"
cookiecutter = "^2.6.0"

[tool.poetry.group.test.dependencies]
add-trailing-comma = "^3.1.0"
bandit = "^1.7.9"
black = "^24.8.0"
codecov = "^2.1.13"
coverage = "^7.6.1"
flake8 = "^7.1.1"
flake8-bugbear = "^24.8.19"
flake8-comprehensions = "^3.15.0"
flake8-docstrings = "^1.7.0"
flake8-simplify = "^0.21.0"
isort = "^5.13.2"
mypy = "^1.11.2"
nbqa = "^1.9.0"
nox = "^2024.4.15"
nox-poetry = "^1.0.3"
pre-commit = "^3.8.0"
prettier = "^0.0.7"
pytest = "^8.3.2"
pytest-cookies = "^0.6.1"
pytest-cov = "^5.0.0"
pytest-randomly = "^3.15.0"
pyupgrade = "^3.17.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

[tool.coverage.report]
show_missing = true
skip_empty = true

[tool.coverage.run]
branch = true
source = ["cookiecutter_python_poetry"]

[tool.black]
line-length = 119
target-version = ["py312"]

[tool.isort]
line_length = 119
profile = "black"

[tool.pyupgrade]
target_version = "py39-plus"

[tool.pycodestyle]
max-line-length = 119
statistics = true

[mypy]
disallow_untyped_defs = true # all functions must have type annotations
disallow_any_unimported = true # cannot use Any for unimported modules
no_implicit_optional = true # no implicit Optional[T] for None
check_untyped_defs = true # check unannotated functions
warn_return_any = true # warn on functions that have a return type of Any
warn_unused_ignores = true # warn on unused # type: ignore comments
strict_optional = true # warn on None for non-optional types
show_error_codes = true # show error codes in the output
